# spark master
mist.context-defaults.spark-conf = {
  spark.master = "spark://127.0.0.1:7077"
}

mist.http.on = true
mist.http.host = "0.0.0.0"
mist.http.port = 2003
mist.http.router-config-path = "/usr/share/mist/configs/router.conf"

mist.mqtt.on = true
mist.mqtt.host = "mosquitto"
mist.mqtt.port = 1883
mist.mqtt.subscribe-topic = "foo"
mist.mqtt.publish-topic = "foo"

mist.recovery.on = false
mist.recovery.multilimit = 10
mist.recovery.typedb = "MapDb"
mist.recovery.dbfilename = "file.db"

mist.workers.runner = "manual" # or "local", or "docker"
mist.workers.docker-host = "localhost" # default for unix socker
mist.workers.docker-port = 80
mist.workers.cmd = """${MIST_HOME}/scripts/ecs/ecs start --runner local --namespace $MIST_WORKER_NAMESPACE --config $MIST_WORKER_CONFIG --jar $MIST_WORKER_JAR_PATH --mist-opts 'clusterName=mist-test;instanceType=t2.small;imageId=ami-ef2a1e89;keyName=mist-ecs;securityGroupIds=sg-0ecf9768;subnetId=subnet-24176e7c;sparkSlavesCount=2' --run-options $MIST_WORKER_RUN_OPTIONS """
mist.workers.cmd-stop = """${MIST_HOME}/scripts/ecs/ecs stop --namespace $MIST_WORKER_NAMESPACE """

mist.context.foo.timeout = 100 days

mist.context-defaults.disposable = false
mist.context-defaults.worker-downtime = 15 min

mist.context.streaming.timeout = Inf

mist.context-settings.onstart = ["foo"]

mist.akka {
  remote {
    log-remote-lifecycle-events = off
    log-recieved-messages = off
    netty.tcp {
      hostname = "mist-hostname"
    }
    transport-failure-detector {
      heartbeat-interval = 30s
      acceptable-heartbeat-pause = 5s
    }
  }
  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  cluster {
    seed-nodes = ["akka.tcp://mist@mist-master:2551"]
    auto-down-unreachable-after = 10s
  }
}
